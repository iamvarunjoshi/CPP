ode: Merge Two Sorted LL
Send Feedback
Given two linked lists sorted in increasing order. Merge them in such a way that the result list is also sorted (in increasing order).
Try solving with O(1) auxiliary space (in-place). You just need to return the head of new linked list, don't print the elements.
Input format :
Line 1 : Linked list 1 elements of length n (separated by space and terminated by -1)
Line 2 : Linked list 2 elements of length m (separated by space and terminated by -1)
Output format :
Merged list elements (separated by space)
Constraints :
1 <= n, m <= 10^4
Sample Input :
 2 5 8 12 -1
 3 6 9 -1
Sample Output :
 2 3 5 6 8 9 12 

/**********
 * Following is the Node class that is already written.
 
class Node{
public:
    int data;
    Node *next;
    Node(int data){
        this -> data = data;
        this -> next = NULL;
    }
};
 
*********/

Node* mergeTwoLLs(Node *head1, Node *head2) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input is handled automatically.
     */
    Node *fh= NULL;
    Node *ft= NULL;
    Node *h1= head1;
    Node *h2= head2;
    while(h1!=NULL&&h2!=NULL)
    {int d1=h1->data;
    int d2=h2->data;
        if(d1<d2)
        {
            if(fh==NULL&&ft==NULL)
            {ft=h1;fh=h1;
             h1=h1->next;}
            else{
            ft->next=h1;
            ft=ft->next;
            h1=h1->next;}
        }
     else{
          if(fh==NULL&&ft==NULL)
            {ft=h2;fh=h2;
             h2=h2->next;}
            else{
            ft->next=h2;
            ft=ft->next;
            h2=h2->next;}

     }
    }
    
    while(h1==NULL&&h2!=NULL)
    {
        ft->next=h2;
        h2=h2->next;
        ft=ft->next;
    }
     
    while(h2==NULL&&h1!=NULL)
    {
        ft->next=h1;
        h1=h1->next;
        ft=ft->next;
    }
     return fh;
    
}


