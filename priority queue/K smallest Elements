 K smallest Elements
Send Feedback
You are given with an integer k and an array of integers that contain numbers in random order. Write a program to find k smallest numbers from given array. You need to save them in an array and return it.
Time complexity should be O(nlogk) and space complexity should be not more than O(k).
Order of elements in the output is not important.
Input Format :
Line 1 : Size of array (n)
Line 2 : Array elements (separated by space)
Line 3 : Integer k
Output Format :
k smallest elements
Sample Input 1 :
13
2 12 9 16 10 5 3 20 25 11 1 8 6 
4
Sample Output 1 :
5
3
2
1


#include<queue>
#include<vector>
vector<int> kSmallest(int *input, int n, int k) {
	
    //approach 1:
    
    priority_queue<int>pq;
    //we're making a queue of k smallest elements
    for(int i=0;i<k;i++)
        pq.push(input[i]);
    
    for(int i=k;i<n;i++)
    {
        //if incoming elemet is less than the largest element then remove largest element first and then push new element
        if(input[i]<pq.top())
        { 	
            pq.pop();
            pq.push(input[i]);
        }
        
    }
    vector<int> ans;
    
    while(!pq.empty())
    {
        ans.push_back(pq.top());
        pq.pop();
    }
    return ans;
    
    /*
    //approach 2:
    priority_queue<int>pq;
    
    for(int i=0;i<k;i++)
        pq.push(input[i]);
    
    //why we push elements first, push the first element and then remove max element from 
    for(int i=k;i<n;i++)
    {   pq.push(input[i]);
      	pq.pop();
    }
    //from n elment we would've poped out n-k large elements and hence we're only left wit k smallest element;
    
    vector<int>ans;
    
    while(!pq.empty())
    { ans.push_back(pq.top());
      pq.pop();
    }
    return ans;
*/
}