Reverse a Queue

Given an integer K and a queue of integers, we need to reverse the order of the first K elements of the queue, leaving the other elements in the same relative order.

Only following standard operations are allowed on queue.

    enqueue(x) : Add an item x to rear of queue
    dequeue() : Remove an item from front of queue
    size() : Returns number of elements in queue.
    front() : Finds front item.

Input:
First line consists of T test cases. First line of every test case consists of 2 integers, N and K, denoting number of elements and number of elements to be reversed respectively. Second line of every test case consists of elements of array.

Output:
For each testcase, in a new line, print the modified queue.

Your Task:
Since this is a function problem, you don't need to take inputs. Just complete the provided function modifyQueue that takes queue and k as parameters and returns a modified queue. The printing is done automatically by the driver code.

Constraints:
1 <= T <= 100
1 <= N <= 1000
1 <= K <= N

Example:
Input:
2
5 3
1 2 3 4 5
4 4
4 3 2 1
Output:
3 2 1 4 5
1 2 3 4


void reverseQueueFirstKElements(int k, queue<int>& Queue) 
{ 
    if (Queue.empty() == true || k > Queue.size()) 
        return; 
    if (k <= 0) 
        return; 
  
    stack<int> Stack; 
  
    /* Push the first K elements into a Stack*/
    for (int i = 0; i < k; i++) { 
        Stack.push(Queue.front()); 
        Queue.pop(); 
    } 
  
    /* Enqueue the contents of stack 
       at the back of the queue*/
    while (!Stack.empty()) { 
        Queue.push(Stack.top()); 
        Stack.pop(); 
    } 
  
    /* Remove the remaining elements and  
       enqueue them at the end of the Queue*/
    for (int i = 0; i < Queue.size() - k; i++) { 
        Queue.push(Queue.front()); 
        Queue.pop(); 
    } 
} 