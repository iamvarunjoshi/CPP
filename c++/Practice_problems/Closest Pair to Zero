Closest Pair to Zero
Send Feedback
You have been given an array of integers with both positive and negative numbers. You need to find a pair of numbers such that its sum is closest or equal to zero.
If you have many pairs with sum closest to zero, print the pair whose smaller value is smallest among all the pairs.
For example: For the array: [-4, -3, -2, -1, 1, 2, 3, 4], there are 4 pairs whose sum is closest to zero. The four pairs are: (-4, 4), (-3, 3), (-2, 2) and (-1, 1). Out of these pairs, the smallest of smaller values is -4, so, the answer should be the pair: (-4, 4).
Input Format:
The first line of contains an integer, N, which denotes the size of the array. The value of N lies in the range: [2, 30000]
The following line contains N space separated integers. The value of each element lies in the range: [-10000, 10000].
Constraints:
Time Limit: 1 second
Output Format:
The first and only line of output prints the pair of integers, whose sum is closest to zero.
Sample Input 1:
6
-9 4 -8 1 2 0
Sample Output 1:
0 1
My solution:
O(n2)

#include<bits/stdc++.h>
#include<cmath>
using namespace std;
int main() {

    int n;
    cin>>n;
    int* arr=new int[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    
    //sort(arr,arrr+n);
    int n1;
    int n2;
    int min=10006;
    
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            int sum=arr[i]+arr[j];
            if(abs(sum)<=abs(min))
            {
                if(abs(sum)==abs(min))
                {   
                    int m1=max(abs(arr[i]),abs(arr[j]));
                    int m2=max(abs(n1),abs(n2));
                	if(m1>m2)
                    {
                        n1=arr[i];
                        n2=arr[j];
                        continue;
                    }
                }
                else{
                    n1=arr[i];
                    n2=arr[j];
                    min=sum;
                }
            }
            
        }
    }
       
if(n1>n2)
    cout<<n2<<" "<<n1;
else
    cout<<n1<<" "<<n2;
   
 delete []arr;
    return 0;
    
}

My solution2:
O(nlogn)


#include<bits/stdc++.h>
#include<cmath>
using namespace std;
int main() {

    int n;
    cin>>n;
    int* arr=new int[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    
    //sort(arr,arrr+n);
    int l=0;
    int r=n-1;
    int min=10006;
    int ml=0;
    int mr=n-1;
    
    sort(arr,arr+n);
    
    while(l<r)
    {
        int sum=arr[l]+arr[r];
        
        if(abs(sum)<abs(min))
        {
            min=sum;
            ml=l;
            mr=r;
        }
        
        if(sum<0)
            l++;
        else
            r--;
    }
        for(int i=0;i<n;i++)
				cout<<arr[i]<<" ";
    
    
    cout<<endl;
    
    
    cout<<arr[ml]<<" "<<arr[mr];
    
    delete []arr;
    return 0;
    
}
Input:
10
1 2 3 4 5 -5 -4 -3 -2 -1
Output:
-5 -4 -3 -2 -1 1 2 3 4 5 
-5 5
Just in case if sum of two or more pairs is equal then answer is that pair that has minimum no in it.

In this approach we've used the concept as if there is a min no whose sum is min that no would be saved in answer as we're finding pairs from the min no's to bigger no's unlike my previous no , in which o are i a  random order and we've to find no with minimum no in its pairs.