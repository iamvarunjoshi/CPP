Maximum Path Sum Between Two Leaves
Send Feedback
Given a binary tree of N nodes, find and return the maximum sum path between two leaves of the given tree.
Given binary tree contains positive values only.
Note: If there is only one leaf in the tree, then return 0 as answer.
Input format :
Line 1 : Nodes in level order form (separated by space). If any node does not have left or right child, take -1 in its place
Output format :
Maximum sum path between two leaves
Constraints :
1 <= N <= 10^5
Sample Input :
10 9 4 3 1 5 8 -1 -1 -1 -1 -1 6 -1 -1 3 -1 -1 -1
Sample Output :
40

// Following is the Binary Tree node structure
/**************
 class BinaryTreeNode {
 public :
 T data;
 BinaryTreeNode<T> *left;
 BinaryTreeNode<T> *right;
 
 BinaryTreeNode(T data) {
 this -> data = data;
 left = NULL;
 right = NULL;
 }
 };
 ***************/
#include<bits/stdc++.h>
#include<iostream>
using namespace std;

long long int ans=0;

long long int helper(BinaryTreeNode<int>* root)
{
    if(root==NULL)
    return 0;

    
long long int l=0;
long long int r=0;

if(root->left!=NULL)
    l=helper(root->left);
if(root->right!=NULL)
    r=helper(root->right);

   // cout<<"left "<<l<<" right "<<r<<" rootdata "<<root->data<<" ans "<<max(l,r)+root->data<<endl;
   
   if(root->left!=NULL&&root->left!=NULL)
   	ans=max(ans,l+r+root->data); 
    
    
    long long sum=max(l,r)+root->data;
    return sum;        
}

long long int maximumSumLeafpath(BinaryTreeNode<int> *root){

    long long int a= helper(root);

    if(root->left==NULL||root->right==NULL)
    	return 0;
    
    return ans;
}
