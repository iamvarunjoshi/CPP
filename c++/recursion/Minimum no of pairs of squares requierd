Minimum Count
Send Feedback
Given an integer N, find and return the count of minimum numbers, sum of whose squares is equal to N.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. Output will be 1, as 1 is the minimum count of numbers required.
Note : x^y represents x raise to the power y.
Input Format :
Integer N
Output Format :
Required minimum count
Constraints :
1 <= N <= 50
Sample Input 1 :
12
Sample Output 1 :
3
Sample Output 1 Explanation :
12 can be represented as :
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 2^2
1^1 + 1^1 + 1^1 + 1^1 + 2^2 + 2^2
2^2 + 2^2 + 2^2
As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1

#include<cmath>
int arr[10000]={0};

int minCount(int n){
    
if(n==1)
    return 1;
else if(n==2)
    return 2;
else if(n==3)
    return 3;
if(arr[n]!=0)
    return arr[n];
    
int ans=n+1;    
for(int i=1;i<=ceil(sqrt(n));i++)
{
    if(n==i*i)
    {
        arr[n]=1;
        return 1;
    }
    else if(n>i*i)
    {
        //coz ek pair apna i*i ka bhi to hai
    	ans=min(ans,minCount(n-(i*i))+1);
		arr[n]=ans;
    }
    else{
        break;
    }
}
return ans;
}





/*
int minCount(int n){

 if(n==0)
   {
       return 0;
   }
    if(n==1)
   {
       return 1;
   }
    int num=n+1;
   for(int i=n;i>0;i--)
   {
       if(n>i*i)
       {   
          num= min(num,minCount(n-i*i)+1);
           
       }
       if(n==i*i)
       {
           num =1; break;
       }
       else{
           continue;
       }
   }
return num;
}
*/


