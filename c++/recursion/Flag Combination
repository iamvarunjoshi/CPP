bool flag=false;

long long find_Ways(int n,char prev=' ', char preprev=' ' )
{
	if(n==0)
		return 0;
	 if(n==1)
		return 1;
		
	if(flag==false)
	{
		flag=true;
		return ( find_Ways(n-2,'B','R')+ find_Ways(n-2,'W','R') + find_Ways(n-2,'B','W') + find_Ways(n-2,'R','W') );
	}
	
	if(prev=='B'&&preprev=='R')
		return find_Ways(n-1,'W','B');
    
	if(prev=='B'&&preprev=='W')
		return find_Ways(n-1,'R','B');
    
	if(prev=='R')
		return ( find_Ways(n-1,'B','R') + find_Ways(n-1,'W','R') );
	if(prev=='W')
		return (find_Ways(n-1,'B','W')+find_Ways(n-1,'R','W'));

}



Flags
Send Feedback
A flag can consists of only three different colors of stripes, White(W), Blue(B) and Red(R). Given an integer N, find and return the number of ways to create such flags having N stripes consisting of these three color stripes only with the following constraints -
1. Stripes of the same color cannot be placed next to each other.
2. A blue stripe must always be placed between a white and a red or between a red and a white one. Hence blue stripe cannot be placed at starting or at ending.
3. Its not necessary to use all three colors.
Input Format :
Single Integer N
Output Format :
Single Integer representing number of ways to create a flag
Constraints :
1 <= N <= 30
Sample Input 1 :
3
Sample Output 1 :
4
Sample Output 1 Explanation :
Possible flags with 3 stripes are : WRW, WBR, RWR, RBW
Sample Input 2 :
4
Sample Output 2 :
6
Sample Output 2 Explanation :
Possible flags with 4 stripes are : WRWR, WRBW, WBRW, RWRW, RWBR, RBWR





long long func(int n,char pre,char pprev);
using namespace std;
long long find_Ways(int N)
{

    long long ways=func(N-2,'b','r')+func(N-2,'b','w')+func(N-2,'r','w')+func(N-2,'w','r');
    return ways;
    ;

   
}
long long func(int n,char pre,char pprev){
long long c1=0,c2=0,c3=0,c4=0;
    if(n==1)
    {
        return 1;
    }
    
    
    
    if(pre=='b'&&pprev=='r')
    {
        return c1= func(n-1,'w','b');
    }
    if(pre=='b'&&pprev=='w')
    {
        return c2= func(n-1,'r','b');
    }
    if(pre=='w')
    {
        return c3= func(n-1,'b','w')+func(n-1,'r','w');
    }
    if(pre=='r')
    {
     return   c4= func(n-1,'b','r')+func(n-1,'w','r');
    }
    //cout<<endl<<(c1+c2+c3+c4)<<endl;
    
    
}
*/