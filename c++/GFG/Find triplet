Given an array and an integer. Find if there's a triplet in the array which sums up to the given integer. 

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. The first line of each test case constains two integers N, size of the array and X, the required sum. The second line of each test case contains N space separated values of the array arr[].

Output:
Print "1" (without quotes) if there exist three elements in arr[] whose sum is exactly X, else "0" (without quotes).

Your Task:
You don't need to read input or print anything. Your task is to complete the function find3Numbers() which takes the array arr[], the size of the array (N) and the sum (X) as inputs and returns True if there exists a triplet in the array arr[] which sums up to X and False otherwise.

Expected Auxiliary Space: O(1)
Expected Time Complexity: O(n2)

Constraints:
1 ≤ T ≤ 100
1 ≤ N ≤ 103
1 ≤ A[i] ≤ 105

Example:
Input:
2
6 13
1 4 45 6 10 8
5 10
1 2 4 3 6
Output:
1
1

Explanation:
Testcase 1: The triplet {1, 4, 8} in the array sums up to 13.
Testcase 2: The triplet {1, 3, 6} in the array sums up to 10.
 
 
// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


// function to find the triplet which sum to x
// arr[] : The input Array
// N : Size of the Array
// X : Sum which you need to search for 

bool find3Numbers(int arr[], int n, int x)
{
    sort(arr,arr+n);
    int j,k,sum;
    
    for(int i=0;i<n;i++)
    {
        j=i+1;
        k=n-1;
        while(j<k)
        {
            sum=arr[i]+arr[j]+arr[k];
            if(sum==x)
                return true;
            else if(sum<x)
                j++;
            else if(sum>x)
                k--;
        }
    }
    return false;
}




// { Driver Code Starts.

int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		int N,sum;
		cin>>N>>sum;
		int i,A[N];
		for(i=0;i<N;i++)
			cin>>A[i];
        cout <<  find3Numbers(A, N, sum) << endl;
    }
}
  // } Driver Code Ends