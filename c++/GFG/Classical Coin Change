Coin change Classic Solution:



int count( int S[], int m, int n ) 
{ 
    // If n is 0 then there is 1 solution  
    // (do not include any coin) 
    if (n == 0) 
        return 1; 
      
    // If n is less than 0 then no  
    // solution exists 
    if (n < 0) 
        return 0; 
  
    // If there are no coins and n  
    // is greater than 0, then no 
    // solution exist 
    if (m <=0 && n >= 1) 
        return 0; 
  
    // count is sum of solutions (i)  
    // including S[m-1] (ii) excluding S[m-1] 
    return count( S, m - 1, n ) + count( S, m, n-S[m-1] ); 
	//when we don't take Sm coin and the case when we use Sm atleast once 
} 



int count( int S[], int m, int n ) 
{ 
    int i, j, x, y; 
  
    // We need n+1 rows as the table  
    // is constructed in bottom up 
    // manner using the base case 0 
    // value case (n = 0) 
    int table[n + 1][m]; 
      
    // Fill the enteries for 0 
    // value case (n = 0) 
    for (i = 0; i < m; i++) 
        table[0][i] = 1; 
  
    // Fill rest of the table entries  
    // in bottom up manner  
    for (i = 1; i < n + 1; i++) 
    { 
        for (j = 0; j < m; j++) 
        { 
            // Count of solutions including S[j] 
            x = (i-S[j] >= 0) ? table[i - S[j]][j] : 0; 
  
            // Count of solutions excluding S[j] 
            y = (j >= 1) ? table[i][j - 1] : 0; 
  
            // total count 
            table[i][j] = x + y; 
        } 
    } 
    return table[n][m - 1]; 
} 

int count( int S[], int m, int n ) 
{ 
    //no of ways to make a denomination nusing m coins
    int dp[n+1][m];
    for(int i=0;i<=n;i++)
        for(int j=0;j<m;j++)
            dp[i][j]=0;
    
        for(int j=0;j<m;j++)
            dp[0][j]=1;
            
            
    for(int i=1;i<=n;i++)
        for(int j=0;j<m;j++)
        {
            if(S[j]<=i)
                dp[i][j]+=dp[i-S[j]][j];
            
            if(j>=1)
            dp[i][j]+=dp[i][j-1];

        }
        
        
        
   return dp[n][m-1];
} 

