Floor in a Sorted Array 

Given a sorted array arr[] of size N without duplicates, and given a value x. Find the floor of x in given array. Floor of x is defined as the largest element K in arr[] such that K is smaller than or equal to x.

Input:
First line of input contains number of testcases T. For each testcase, first line of input contains number of elements in the array and element whose floor is to be searched. Last line of input contains array elements.

Output:
Output the index of floor of x if exists, else print -1 (0 based Indexing).

User Task:
The task is to complete the function findFloor() which finds the floor of x.

Expected Time Complexity: O(log N).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ T ≤ 100
1 ≤ N ≤ 107
1 ≤ arr[i] ≤ 1018
0 ≤ X ≤ arr[n-1]

Example:
Input:
3
7 0
1 2 8 10 11 12 19
7 5
1 2 8 10 11 12 19
7 10
1 2 8 10 11 12 19

Output:
-1
1
3

Explanation:
Testcase 1: No element less than 0 is found. So output is "-1".
Testcase 2: Number less than 5 is 2, whose index is 1(0-based indexing).
Testcase 3: Number less than or equal to 10 is 10 and its index is 3.
 

** For More Input/Output Examples Use 'Expected Output' option **

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


// Function to find floor of x
// n: size of vector
// x: element whose floor is to find
int findFloor(vector<long long> arr, long long n, long long x){

int low=0,high=n-1,mid=-1;
if(arr[0]>x)
return -1;
if(arr[n-1]<x)
return n-1;


while(low<=high)
{
    mid=(low+high)/2;
    if(arr[mid]==x||arr[mid]<x && arr[mid+1]>x)
        return mid;
    else if(arr[mid]>x)
    {   if(arr[mid-1]<=x)
            return mid-1;
        //else
            high=mid-1;
    }
    else
        low=mid+1;
}
if(arr[low]>x&&arr[low-1]<=x)
low--;
return low;


/*
for(int i=0;i<n;i++)
{   
if(arr[i]==x)
    return i;
else if(arr[i]>x)
    return i-1;
}*/
}





// { Driver Code Starts.

int main() {
	
	long long t;
	cin >> t;
	
	while(t--){
	    long long n;
	    cin >> n;
	    long long x;
	    cin >> x;
	    
	    vector<long long> v;
	    
	    for(long long i = 0;i<n;i++){
	        long long temp;
	        cin >> temp;
	        v.push_back(temp);
	    }
	    
	    cout << findFloor(v, n, x) << endl;
	   
	}
	
	return 0;
}  // } Driver Code Ends