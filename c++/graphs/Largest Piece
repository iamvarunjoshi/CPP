Largest Piece
Send Feedback
Its Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with eachother on the cake. Given the size of cake N and the cake , can you find the size of the biggest piece of '1's for Gary ?
Constraints :
1<=N<=50
Input Format :
Line 1 : An integer N denoting the size of cake 
Next N lines : N characters denoting the cake
Output Format :
Size of the biggest piece of '1's and no '0's
Sample Input :
2
11
01
Sample Output :
3

bool isvalid(int x,int y,int n)
{
	bool ans= (x>=0&&x<n)&&(y>=0&&y<n);
return ans;
}

/*
	0
0	1	0
	0
*/
// 0 th col is for x
// 
int a[4][2]={{-1,0},{0,-1},{0,1},{1,0}};
bool unvisited[NMAX][NMAX];

int func(char g[NMAX][NMAX],int i,int j,int n)
{
	int newy,newx;
	int count=0;
	unvisited[i][j]=true;
	for(int k=0;k<4;k++)
	{
		newx=i+a[k][0];
		newy=j+a[k][1];
		if(isvalid(newx,newy,n)&&g[newx][newy]=='1'&&!unvisited[newx][newy])
		{
			count=func(g,newx,newy,n) +count;
		}
	}

return count+1;
}

int solve(int n,char gp[NMAX][NMAX])
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            unvisited[i][j]=false;
        }
    }
    
	int max=0;
	int count=0;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(gp[i][j]=='1'&&!unvisited[i][j])
			{
				count=func(gp,i,j,n);
				if(count>max)
					max=count;
			}
		}
	}
    return max;
}
