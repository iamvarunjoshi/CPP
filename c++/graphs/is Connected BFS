Is Connected ?
Send Feedback
Given an undirected graph G(V,E), check if the graph G is connected graph or not.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
Output Format :
"true" or "false"
Constraints :
2 <= V <= 1000
1 <= E <= 1000
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 


#include<iostream>
#include<queue>
using namespace std;

void DFS(int** edges,bool* visited,int v,int sv)
{
	visited[sv]=true;    
    for(int i=0;i<v;i++)
    {
     	if(!visited[i]&&edges[sv][i]==1)
            DFS(edges,visited,v,i);
    }
}

bool isconnectedDFS(int** edges,bool* visited,int v,int sv)
{
    DFS(edges,visited,v,sv);

    for(int i=0;i<v;i++)
    {
        if(visited[i]==false)
            return false;
    }
    return true;
}

bool isconnectedBFS(int** edges,bool* visited,int v,int sv)
{
    queue<int>pnodes;
    pnodes.push(sv);
    while(!pnodes.empty())
    {
        int cv=pnodes.front();
        pnodes.pop();
        if(!visited[cv])
        {    visited[cv]=true;
            for(int i=0;i<v;i++)
            {
                if(!visited[i]&&edges[cv][i]==1)
                    pnodes.push(i);
            }
        }
    }

    for(int i=0;i<v;i++)
    {
        if(visited[i]==false)
            return false;
    }
return true;
}



int** makegraph(int V,int E)
{
    int **edges=new int*[V];
    for(int i=0;i<V;i++)
    {
        edges[i]=new int[V];
            for(int j=0;j<V;j++)
              edges[i][j]=0;
    }

    for(int i=0;i<E;i++)
    {int e1,e2;
        cin>>e1>>e2;
     edges[e1][e2]=1;
     edges[e2][e1]=1;
    }
    return edges;
}

void deletegraph(int** edges,bool* visited,int v)
{
    for(int i=0;i<v;i++)
        delete []edges[i];

    delete []edges;
    delete []visited;
}

int main()
{
    
int v,e;
cin>>v>>e;
int **edges=makegraph(v,e);
bool *visited=new bool[v];
for(int i=0;i<v;i++)
    visited[i]=false;

bool ans=isconnectedDFS(edges,visited,v,0);
//bool ans=isconnectedBFS(edges,visited,v,0);
cout<<((ans==true)?"true":"false");

deletegraph(edges,visited,v);
return 0;
}