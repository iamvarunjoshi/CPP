Trip to cities
Send Feedback
You want to plan a trip to a country with N cities and M bidirectional roads. But there is a special city called capital C, where you will land. But there is a restriction, you can only visit cities which are at most k distance from the capital. Can you count the number of cities that you can visit during your trip (including capital) ?
Input Format :
Line 1 : Four Integers N , M ,C (Capital), K
Next M lines : Three integers X, Y, Z where city X and Y have a road between them which has length Z
Output Format :
Print the number of cities that you can visit during your trip
Constraints :
1 <= N <= 100005
1 <= M <= 200005
1 <= X,Y <=N
1 <= Z <= 100
Sample Input :
4 3 1 1
1 2 1
2 3 1
3 4 1
Sample Output :
2


//need to solve space limit exceed

#include <iostream>
#include<climits>
using namespace std;

class graph
{
	public:
	int **gp;
	int v,e;
	bool *visited;
	int *weight;
	int source;
	int k;
	
	graph(int V,int e,int c,int k)
	{
		v=V+1;
		this->e=e;
		this->k=k;
		source=c;
			gp=new int*[v+1];

			for(int i=0;i<v;i++)
			{
				gp[i]=new int[v];
				for(int j=0;j<v;j++)
				{
					gp[i][j]=0;
				}
			}
			
			for(int i=0;i<e;i++)
			{
				int f,s,w;
				cin>>f>>s>>w;
				gp[f][s]=w;
				gp[s][f]=w;
			}
			
		visited=new bool[v];
		weight=new int[v];
		for(int i=0;i<v;i++)
		{
			visited[i]=false;
			weight[i]=INT_MAX;
		}
		weight[c]=0;
	}
    
	~graph()
	{
		for(int i=0;i<v;i++)
		{
			delete []gp[i];
		}
		delete []gp;
		delete []visited;
		delete []weight;
	}
	
	int minvertex()
	{
		int mv=-1;
		for(int i=1;i<v;i++)
		{
			if(!visited[i]&&(mv==-1||weight[i]<weight[mv]))
			{
				mv=i;
			}
		}
		return mv;
	}
	
	
	void djikstra()
	{
		for(int i=1;i<v;i++)
		{
			int mv=minvertex();
            visited[mv]=true;
			for(int j=1;j<v;j++)
			{
				if(!visited[j]&&gp[mv][j]!=0)
				{
				int cw=weight[mv]+gp[mv][j];
					if(cw<weight[j])
					{
						weight[j]=cw;
					}
				}
			}
		}
		ans();
	}
	
	void ans()
	{
		int count=0;
		for(int i=1;i<v;i++)
		{
			if(weight[i]<=k)
				count++;
		}
		cout<<count;
	}
};



int main()
{
  int v, e,c,k;
  cin >> v >> e>>c>>k;
	graph g(v,e,c,k);
    g.djikstra();
    return 0;
}
