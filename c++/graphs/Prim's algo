//Prims Algorithm
Code : Prim's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format -
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
MST
Constraints :
2 <= V, E <= 10^5
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 1 3
1 2 1
0 3 5

#include <iostream>
#include<climits>
using namespace std;

class graph
{
	public:
	int **gp;
	int v,e;
	bool *visited;
	int *weight;
	int *parents;
	
	graph(int v,int e)
	{
		this->v=v;
		this->e=e;
			gp=new int*[v];

			for(int i=0;i<v;i++)
			{
				gp[i]=new int[v];
				for(int j=0;j<v;j++)
				{
					gp[i][j]=0;
				}
			}
			
			for(int i=0;i<e;i++)
			{
				int f,s,w;
				cin>>f>>s>>w;
				gp[f][s]=w;
				gp[s][f]=w;
			}
			
		visited=new bool[v];
		weight=new int[v];
		parents=new int[v];
		for(int i=0;i<v;i++)
		{
			visited[i]=false;
			weight[i]=INT_MAX;
			parents[i]=i;
		}
		parents[0]=-1;
		weight[0]=0;
	}
	~graph()
	{
		for(int i=0;i<v;i++)
		{
			delete []gp[i];
		}
		delete []gp;
		delete []visited;
		delete []weight;
		delete []parents;
	}
	
	int minvertex()
	{
		int mv=-1;
		for(int i=0;i<v;i++)
		{
			if(!visited[i]&&(mv==-1||weight[i]<weight[mv]))
			{
				mv=i;
			}
		}
		return mv;
	}
	
	
	void prims()
	{
		for(int i=0;i<v-1;i++)
		{
			int mv=minvertex();
            visited[mv]=true;
			for(int j=0;j<v;j++)
			{
				if(!visited[j]&&gp[mv][j]!=0)
				{
					if(gp[mv][j]<weight[j])
					{
						weight[j]=gp[mv][j];
						parents[j]=mv;
					}
				}
			}
		}
		print();
	}
	
	void print()
	{
		for(int i=1;i<v;i++)
		{
			if(i>=parents[i])
				cout<<parents[i]<<" "<<i<<" "<<weight[i]<<endl;			
            else
				cout<<i<<" "<<parents[i]<<" "<<weight[i]<<endl;

		}
	}
};



int main()
{
  int v, e;
  cin >> v >> e;
	graph g(v,e);
    g.prims();
    return 0;
}

//without classes
/*
#include <iostream>
#include<climits>
using namespace std;

int findminIndex(int *weight,bool* visited,int n)
{
    int minindex=-1;
    for(int i=0;i<n;i++)
    {if(!visited[i]&&(minindex==-1||weight[i]<weight[minindex]))
    {
        minindex=i;
        
    }
        
    }
    return minindex;
}


void prims(int **edges,int n)
{
int *weight=new int[n];
bool *visited=new bool[n];
int *parent=new int[n];

for(int i=0;i<n;i++)
{
visited[i]=false;
weight[i]=INT_MAX;
}
    
weight[0]=0;
parent[0]=-1;

for(int i=0;i<n-1;i++)
{
int min_index=findminIndex(weight,visited,n);
   // cout<<"min index "<<min_index<<endl;
visited[min_index]=true;
	for(int j=0;j<n;j++)
		{
			if(!visited[j]&&(edges[min_index][j]<weight[j])&&edges[min_index][j]!=0)
				{	weight[j]=edges[min_index][j];
					parent[j]=min_index;
				}

			}
}
for(int i=1;i<n;i++)
{
if(i<parent[i])
{cout<<i<<" "<<parent[i]<<" "<<weight[i]<<endl;}
else
{cout<<parent[i]<<" "<<i<<" "<<weight[i]<<endl;
}

}




}



int** makegraph(int v,int e)
{
    int **edges=new int*[v];
    for(int i=0;i<v;i++)
    {
        edges[i]=new int[v]; 
        for(int j=0;j<v;j++)
        {
            edges[i][j]=0;
        }
        
    }
    
    for(int i=0;i<e;i++)
    {int fe,se,w;
     cin>>fe>>se>>w;
        edges[fe][se]=w;
        edges[se][fe]=w;
    }
    return edges;
    
}



int main()
{
  int V, E, tempX, tempY;
  cin >> V >> E;
int **edges=makegraph(V,E);
    prims(edges,V)    ;

    return 0;
}



*/