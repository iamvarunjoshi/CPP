Given an array A[] of N positive integers. The task is to find the maximum of j - i subjected to the constraint of A[i] <= A[j].

Input:
The first line contains an integer T, depicting the total number of test cases.  Then T test case follows. The first line of each test case contains an integer N denoting the size of the array. Next line contains N space-separated integers denoting the elements of the array.

Output:
For each test case, print the maximum difference of the indexes i and j in a separate line.

User Task:
The task is to complete the function maxIndexDiff() which finds and returns maximum index difference. Printing the output will be handled by driver code.

Constraints:
1 ≤ T ≤ 1000
1 ≤ N ≤ 107
0 ≤ A[i] ≤ 1018

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Example:
Input:
2
2
1 10
9
34 8 10 3 2 80 30 33 1

Output:
1
6

Explanation:
Testcase 1: A[0]<=A[1] so (j-i) is 1-0 = 1.
Testcase 2:  In the given array A[1] < A[7] satisfying the required condition(A[i] <= A[j]) thus giving the maximum difference of j - i which is 6(7-1).

** For More Input/Output Examples Use 'Expected Output' option **


For those stuck, think!
construct a structure like < array_value , index >
sort based on array_value
apply kadanes on sorted by taking into account the index



// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


// Function to find the maximum difference of j-i
// arr[]: input array
// n: size of array
#include<vector>
#define pair pair<int,int>
#define mp make_pair
#define fi first
#define se second
int maxIndexDiff(int arr[], int n) 
{ 
    vector<pair> index;
    
    for(int i=0;i<n;i++)
        index.push_back(mp(arr[i],i));
    
    sort(index.begin(),index.end());
    
    int ans=0;
    int mi=index[n-1].se;
    
    for(int i=n-2;i>=0;i--)
    {
        ans=max(ans,mi-(index[i].se));
        mi=max(mi,index[i].se);
    }
    return ans;
}

