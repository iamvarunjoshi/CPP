Next Number
Send Feedback
Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).
Note: You don't need to print the elements, just update the elements and return the head of updated LL.
Input Constraints:
1 <= Length of Linked List <=10^6.
Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)
Output Format :
Line 1: Updated linked list elements 
Sample Input 1 :
3 9 2 5 -1
Sample Output 1 :
3 9 2 6
Sample Input 2 :
9 9 9 -1



/**********
 * Following is the Node class that is already written.
 
class Node{
public:
    int data;
    Node *next;
    Node(int data){
        this -> data = data;
        this -> next = NULL;
    }
};
 
*********/

Node * reversell(Node *head)
{
    if(head==NULL||head->next==NULL)
        return head;
    
    Node *tail=head->next;
    Node * temp=head;
    head->next=NULL;
    
    head=reversell(tail);
    tail->next=temp;
      return head;
}





Node* NextLargeNumber(Node *head) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input is handled automatically.
     */
    head=reversell(head);
    Node * temp=head;
    int carry=0;
    
    temp->data++;
    if(temp->data<10)
    {
        return reversell(head);
    }
    else{
        temp->data=0;
        carry=1;
        temp=temp->next;
        while(carry!=0&&temp!=NULL)
        {
            if(temp->data + carry<10)
            {
                carry=0;
                temp->data++;
                break;
            }
            {
                temp->data=0;
                if(temp->next!=NULL)
                temp=temp->next;
                else
                {
                    Node* newNode=new Node(1);
                    temp->next=newNode;
                    newNode->next=NULL;
                    break;
                }       
                carry=1;
            }
        }        
    }
    
return reversell(head);        
    
}


