Stack Using 2 queues
Send Feedback
You need to implement a Stack class using two queues as its data members.
Only 2 data members should be there inside the class - two queues, which should be created dynamically and both should be public. Use the inbuilt queue.
Implement the following public functions :
1. Constructor -
Initialises both the data members.
2. push :
This function should take one argument of type T and has return type void. This function should insert an element in the stack. Time complexity should be O(1).
3. pop :
This function takes no input arguments and has return type T. This should removes the last element which is entered and return that element as an answer.
4. top :
This function takes no input arguments and has return type T. This should return the last element which is entered and return that element as an answer.
5. getSize :
Return the size of stack i.e. count of elements which are present ins stack right now. Time complexity should be O(1).


/**********
 
 Following is the main function we are using internally.
 Refer this for completing the stack class.
 
Approach 1: push operation is O(n)  and pop O(1)

 #include <iostream>
 using namespace std;
 #include "Solution.h"
 
 int main(){
    stack<int> s;
    int choice, input;
 
    while(true){
 
        cin >> choice;
 
        switch(choice){
            case 1: // Push element
                cin >> input;
                s.push(input);
                break;

            case 2: // Pop element
                cout << s.pop() << "\n";
                break;
            
            case 3: // Reads the top element
                cout << s.top() << "\n";
                break;

            case 4 : // Size
                cout << s.getSize() << endl;
                break;

            case 5 : // Test
                while(!s.q1 -> empty()) {
                    cout << s.q1 -> front() << " ";
                    s.q1 -> pop();
                }
                break;
                return 0;
 
            default:
                return 0;
                break;
        }
    }
 }

 
 ************/
#include<queue>
template<typename T>

class stack {
    int size;
	public:
    queue<T> *q1;
    queue<T> *q2;
    
    stack()
    {
        q1=new queue<T>;
    	q2=new queue<T>;
    }
    void push(int element){
        if(q1->empty())
        {
            q1->push(element);
            size++;
            return;
        }
        size++;
        while(!q1->empty())
        {
            q2->push(q1->front());
            q1->pop();
        }
        q1->push(element);
        while(!q2->empty())
        {
            q1->push(q2->front());
            q2->pop();
        }
        
    }
    T pop()
    {
        if(q1->empty())
        {
            return -1;
        }
        size--;
        T ans= q1->front();
        q1->pop();
        return ans;
    }
    
    T top()
    {
        if(q1->empty())
        {
            return 0;
        }
		
        return q1->front();        
    }
    
    int getSize()
    {
    if(size==0||size<0)
        {
            size=0;
            return 0;
        }
        
     return size;   
    }
};

Approach2: push is O(1) and pop(n)

#include<queue>
template<typename T>

class stack {
    int size;
    public:
    queue<T> *q1;
    queue<T> *q2;
    
    stack()
    {
        q1=new queue<T>;
        q2=new queue<T>;
    }
    
    void push(int element){
       q1->push(element); 
    }
    
    T pop()
    {
        while(q1->size()>1)
        {
            q2->push(q1->front());
            q1->pop();
        }
        T ans=q1->front();
        q1->pop();
        queue<int>* temp=q2;
        q2=q1;
        q1=temp;
        return ans;
    }
    
    T top()
    {
        while(q1->size()>1)
        {
            q2->push(q1->front());
            q1->pop();
        }
        T ans=q1->front();
        q2->push(ans);
        q1->pop();
        queue<int>* temp=q2;
        q2=q1;
        q1=temp;
        return ans;
    }
    
    int getSize()
    {
        return q1->size();  
    }
};
