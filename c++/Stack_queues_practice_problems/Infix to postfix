Infix to postfix
Send Feedback
Given an infix expression S in the form of a string. You need to convert and print that input expression in postfix form. After that, evaluate and print the result of given expression in next line.
Input Format :
Infix expression
Output Format :
Line 1 : Corresponding postfix expression
Line 2 : Result of input expression after evaluation
Constraints :
1 <= Length of S <= 100
Sample Input 1 :
3+4
Sample Output 1 :
34+
7

#include<stack>
#include<cstring>
#include<iostream>

using namespace std;

int precedence(char c)
{
if(c == '*' || c == '/')
return 2;
else if(c == '+' || c == '-')
return 1;
else
return -1;
}
void eval(char exp[]);

void evaluatePostfix(char exp[]) {
stack<char> operators;
string s;
    
    for(int i=0;i<strlen(exp);i++)
    {
        if(exp[i]=='(')
        {
            operators.push('(');
        }
        else if(exp[i]>='0'&&exp[i]<='9')
        {
            s.push_back(exp[i]);
        }
        else if(exp[i]==')')
        { 
           while(!operators.empty() &&operators.top() != '(')
            {
                char c = operators.top();
                operators.pop();
                s.push_back(c);
            }
            if(!operators.empty()&&operators.top() == '(')
            {
                char c =operators.top();
                operators.pop();
            }

        }
        else{
            int prec=precedence(exp[i]);
            if(!operators.empty()&&prec>precedence(operators.top()))
            {
                operators.push(exp[i]);
            }
            else
            {
                while(!operators.empty()&&prec<=precedence(operators.top()))
                {
                    s.push_back(operators.top());
                    operators.pop();
                }
                operators.push(exp[i]);
            }
        }
        
    }
    cout<<s<<endl;
    eval(exp);
}

int result(int num1,int num2,char op)
{
    int ans=0;
    
    if(op=='+')
        ans=num1+num2;
    else if(op=='-')
        ans=num1-num2;        
    else if(op=='*')
        ans=num1*num2;        
    else if(op=='/')
        ans=num2/num1;

    return ans;
}

void eval(char exp[])
{
 stack<int> num;
 stack<char> operators;
   
for(int i=0;i<strlen(exp);i++)
{
    if(exp[i]=='(')
    {
        operators.push('(');
    }
    else if(exp[i]>='0'&&exp[i]<='9')
    {
     	num.push(exp[i]-'0');   
    }
    else if(exp[i]==')')
    {
        while(!operators.empty()&&operators.top()!='(')
        {
            int num1=num.top();
            num.pop();
			int num2=num.top();
            num.pop();
            int num3=result(num1,num2,operators.top());
            //cout<<num3<<' ';
            operators.pop();
            num.push(num3);            
        }
        if(operators.top()=='(')
        {
            operators.pop();
        }
    }
    else{
        int prec=precedence(exp[i]);
        if(!operators.empty()&&prec>precedence(operators.top()))
        {
            operators.push(exp[i]);
        }
        else{
            while(!num.empty()&&!operators.empty()&&prec<=precedence(operators.top()))
            {
            	int num1=num.top();
                	num.pop();
                int num2=num.top();
                	num.pop();
                int num3=result(num1,num2,operators.top());
                	operators.pop();
					num.push(num3);
            }
            operators.push(exp[i]);
        }
    }
}  
 //cout<<num.size()<<" ";
 cout<<num.top()<<endl;   
}

    
    
    





#include<stack>


int length(char input[]){
int i=0;
while(input[i])
i++;
return i;
}

//Function to return priority of operators
int priority(char c)
{
if(c == '*' || c == '/')
return 2;
else if(c == '+' || c == '-')
return 1;
else
return -1;
}

// returns the value when a specific operator operates on two operands
int evaluate(int op1, int op2, char operate) {
switch (operate) {
case '*': return op2 * op1;
case '/': return op2 / op1;
case '+': return op2 + op1;
case '-': return op2 - op1;
default : return 0;
}
}


// convert infix expression to postfix expression
void infixToPostfix(char *input)
{
stack<char> s;
int len = length(input),index=0;
char output[1000];
for(int i = 0; i < len; i++)
{
if((input[i] >= '0' && input[i] <= '9')) {
output[index++] = input[i];
} else if(input[i] == '(') {
s.push('(');
} else if(input[i] == ')')
{
// If the scanned character is an ‘)’, pop and to output string from the stack
until an ‘(‘ is encountered.
while(!s.empty() && s.top() != '(')
{
char c = s.top();
s.pop();
output[index++] = c;
}
if(s.top() == '(')
{
char c = s.top();
s.pop();
}
} else{
while(!s.empty() && priority(input[i]) <= priority(s.top()))
{
char c = s.top();
s.pop();
output[index++]= c;
}
s.push(input[i]);
}
}
//Pop all the remaining elements from the stack
while(!s.empty())
{
char c = s.top();
s.pop();
output[index++] = c;
}
output[index] = '\0';
cout << output << "\n";
//copying to change input expression from calling function evaluatePostfix
int i=0;
while(i < length(output)){
input[i] = output[i];
i++;
}
input[i] = '\0';
}


void evalPostfix(char postfix[]) {
stack<int> s;
int i = 0;
char ch;
int val;
int len = length(postfix);
while (i < len) {
ch = postfix[i];
if (isdigit(ch)) {
s.push(ch-'0');
}
else {
int op1 = s.top();
s.pop();
int op2 = s.top();
s.pop();
val = evaluate(op1, op2, ch);
s.push(val);
}
i++;
}
cout << val;
}
void evaluatePostfix(char exp[]) {
infixToPostfix(exp);
evalPostfix(exp);
}