Reverse first K elements
Send Feedback
Given a queue and an integer k, reverse first k elements. Return the updated queue.
Do the problem in O(n) complexity.
Input Format :
Line 1 : Integer N, Size of Queue
Line 2 : Queue Elements (separated by space)
Line 3 : Integer k
Output Format:
Updated Queue elements
Contraints :
1<= N <=10000
Sample Input 1:
5
1 2 3 4 5
3
Sample Output 1:
3 2 1 4 5
Sample Input 2:
7
3 4 2 5 6 7 8
7
Sample Output 2:
8 7 6 5 2 4 3


Approach 1: basic approach:
#include <cmath>
#include <iostream>
#include<bits/stdc++.h>
using namespace std;

queue<int> reverseKElements(queue<int> input, int k) {
stack<int> temp;
queue<int> rev;
int count=0;
    for(count=0;count<k;count++)
    {
        temp.push(input.front());
        input.pop();
    }
    
    for(count=0;count<k;count++)
    {
        rev.push(temp.top());
        temp.pop();
    }   
    while(!input.empty())
    {
        rev.push(input.front());
        input.pop();
    }
    return rev;
}

Approach 2: i only used a one stack and no other additional queue.


queue<int> reverseKElements(queue<int> input, int k) {

if(input.empty()||input.size()<k||k<=0)
    return input;
    
stack<int> temp;    
int i;
int n=input.size();    
    
for(i=0;i<k;i++)
{
    temp.push(input.front());
    input.pop();
}
    
for(i=0;i<k;i++)
{
    input.push(temp.top());
    temp.pop();
}
    
for(i=0;i<n-k;i++)
{
    input.push(input.front());
    input.pop();
}
return input;
}

