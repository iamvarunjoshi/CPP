Ways To Make Coin Change
Send Feedback
You are given an infinite supply of coins of each of denominations D = {D0, D1, D2, D3, ...... Dn-1}. You need to figure out the total number of ways W, in which you can make change for Value V using coins of denominations D.
Note : Return 0, if change isn't possible.
Input Format
Line 1 : Integer n i.e. total number of denominations
Line 2 : N integers i.e. n denomination values
Line 3 : Value V
Output Format
Line 1 :  Number of ways i.e. W
Constraints :
1<=n<=10
1<=V<=1000
Sample Input 1 :
3
1 2 3
4
Sample Output
4
Sample Output Explanation :
Number of ways are - 4 total i.e. (1,1,1,1), (1,1, 2), (1, 3) and (2, 2).



int countWaysToMakeChange(int S[], int m, int n){
int dp[n+1][m];
//this array contains no of ways using coins of denomination m
    //we can achieve denomination i

    for(int i=0;i<m;i++)
        dp[0][i]=1;    
    //there's only oe way we can make a no 0 using diff coins of other denominations
    for(int deno=1;deno<=n;deno++)
    {
        for(int j=0;j<m;j++)
        {
            //if currency is smaller than denominatio then the no of ways we can maek that denomination
            //would be equal to denomination that can be made using totalno- S[j] i.e. total value -denomination
            int x=(deno>=S[j])?dp[deno-S[j]][j]:0;
            int y=(j>0)?(dp[deno][j-1]):0;
            //if currency is the lowest then we can't express our no i term of currency bigger than that
        	dp[deno][j]=x+y;
        }
    }
    return dp[n][m-1];    
}

/*
int countWaysToMakeChange(int S[], int m, int n){

int i, j, x, y;
// We need n+1 rows as the table is constructed
// in bottom up manner using the base case 0
// value case (n = 0)
int table[n+1][m];
// Fill the enteries for 0 value case (n = 0)
for (i=0; i<m; i++)
table[0][i] = 1;
// Fill rest of the table entries in bottom
// up manner
for (i = 1; i < n+1; i++)
{
for (j = 0; j < m; j++)
{
// Count of solutions including S[j]
x = (i-S[j] >= 0)? table[i - S[j]][j]: 0;
// Count of solutions excluding S[j]
y = (j >= 1)? table[i][j-1]: 0;
// total count
table[i][j] = x + y;
}
}
return table[n][m-1];
}

*/